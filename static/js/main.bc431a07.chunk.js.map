{"version":3,"sources":["components/SearchBar.js","api/youTube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","value","handleChange","e","setState","target","handleSubmit","preventDefault","props","onSubmit","className","this","type","onChange","Component","axios","create","baseURL","VideoItem","video","handleClick","onClick","src","snippet","thumbnails","medium","url","alt","kind","title","VideoList","renderList","videos","map","key","id","videoId","VideoDetail","videoSrc","description","App","selectedVideo","onFormSubmit","a","youTube","get","params","q","part","maxResults","process","response","data","items","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAmCeA,E,4MAhCbC,MAAQ,CACNC,MAAO,I,EAGTC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,MAAOE,EAAEE,OAAOJ,S,EAIpBK,aAAe,SAACH,GACdA,EAAEI,iBAEF,EAAKC,MAAMC,SAAS,EAAKT,MAAMC,Q,uDAG/B,OACE,yBAAKS,UAAU,yBACb,0BAAMA,UAAU,UAAUD,SAAUE,KAAKL,cACvC,yBAAKI,UAAU,SACb,+CACA,2BACEE,KAAK,OACLX,MAAOU,KAAKX,MAAMC,MAClBY,SAAUF,KAAKT,sB,GAzBLY,a,QCATC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,0CCcIC,G,MAdG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC1B,OACE,yBAAKV,UAAU,kBAAkBW,QAAS,kBAAMD,EAAYD,KAC1D,yBACET,UAAU,WACVY,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IACrCC,IAAKR,EAAMS,OAEb,yBAAKlB,UAAU,WACb,yBAAKA,UAAU,UAAUS,EAAMI,QAAQM,WCKhCC,EAdG,SAACtB,GACjB,IAAMuB,EAAavB,EAAMwB,OAAOC,KAAI,SAACd,GACnC,OACE,kBAAC,EAAD,CACEe,IAAKf,EAAMgB,GAAGC,QACdjB,MAAOA,EACPC,YAAaZ,EAAMY,iBAKzB,OAAO,yBAAKV,UAAU,2BAA2BqB,ICKpCM,EAjBK,SAAC,GAAe,IAAblB,EAAY,EAAZA,MACrB,IAAKA,EACH,MAAO,aAET,IAAMmB,EAAQ,wCAAoCnB,EAAMgB,GAAGC,SAC3D,OACE,6BACE,yBAAK1B,UAAU,YACb,4BAAQY,IAAKgB,EAAUT,MAAM,kBAE/B,yBAAKnB,UAAU,cACb,wBAAIA,UAAU,aAAaS,EAAMI,QAAQM,OACzC,2BAAIV,EAAMI,QAAQgB,gBC4CXC,E,4MAnDbxC,MAAQ,CACNgC,OAAQ,GACRS,cAAe,M,EAKjBC,a,uCAAe,WAAOzC,GAAP,eAAA0C,EAAA,sEACUC,EAAQC,IAAI,UAAW,CAC5CC,OAAQ,CACNC,EAAG9C,EACH+C,KAAM,UACNC,WAAY,EACZf,IAAKgB,6CANI,OACPC,EADO,OASb,EAAK/C,SAAS,CACZ4B,OAAQmB,EAASC,KAAKC,MACtBZ,cAAeU,EAASC,KAAKC,MAAM,KAXxB,2C,wDAefjC,YAAc,SAACD,GACb,EAAKf,SAAS,CACZqC,cAAetB,K,kEAnBjBR,KAAK+B,aAAa,e,+BAyBlB,OADAY,QAAQC,IAAI,MAAO5C,KAAKX,MAAMgC,QAE5B,yBAAKtB,UAAU,gBACb,kBAAC,EAAD,CAAWD,SAAUE,KAAK+B,eAC1B,yBAAKhC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAaS,MAAOR,KAAKX,MAAMyC,iBAEjC,yBAAK/B,UAAU,oBACb,kBAAC,EAAD,CACEsB,OAAQrB,KAAKX,MAAMgC,OACnBZ,YAAaT,KAAKS,sB,GA1ChBN,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.bc431a07.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n  state = {\n    value: '',\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state.value);\n  };\n  render() {\n    return (\n      <div className=\"search-bar ui segment\">\n        <form className=\"ui form\" onSubmit={this.handleSubmit}>\n          <div className=\"field\">\n            <label>Video Serach</label>\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\nexport default SearchBar;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n});\n","import React from 'react';\nimport './VideoItem.css';\n\nconst VideoItem = ({ video, handleClick }) => {\n  return (\n    <div className=\"video-item item\" onClick={() => handleClick(video)}>\n      <img\n        className=\"ui image\"\n        src={video.snippet.thumbnails.medium.url}\n        alt={video.kind}\n      />\n      <div className=\"content\">\n        <div className=\"header\">{video.snippet.title}</div>\n      </div>\n    </div>\n  );\n};\nexport default VideoItem;\n","import React from 'react';\nimport VideoItem from './VideoItem';\n\nconst VideoList = (props) => {\n  const renderList = props.videos.map((video) => {\n    return (\n      <VideoItem\n        key={video.id.videoId}\n        video={video}\n        handleClick={props.handleClick}\n      />\n    );\n  });\n\n  return <div className=\"ui relaxed divided list\">{renderList}</div>;\n};\n\nexport default VideoList;\n","import React from 'react';\n\nconst VideoDetail = ({ video }) => {\n  if (!video) {\n    return 'loading...';\n  }\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe src={videoSrc} title=\"video player\" />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\nexport default VideoDetail;\n","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport youTube from './api/youTube';\nimport VideoList from './components/VideoList';\nimport VideoDetail from './components/VideoDetail';\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: null,\n  };\n  componentDidMount() {\n    this.onFormSubmit('buildings');\n  }\n  onFormSubmit = async (value) => {\n    const response = await youTube.get('/search', {\n      params: {\n        q: value,\n        part: 'snippet',\n        maxResults: 5,\n        key: process.env.REACT_APP_YOUTUBE_KEY,\n      },\n    });\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0],\n    });\n  };\n\n  handleClick = (video) => {\n    this.setState({\n      selectedVideo: video,\n    });\n  };\n\n  render() {\n    console.log('odp', this.state.videos);\n    return (\n      <div className=\"ui container\">\n        <SearchBar onSubmit={this.onFormSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n              <VideoList\n                videos={this.state.videos}\n                handleClick={this.handleClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}